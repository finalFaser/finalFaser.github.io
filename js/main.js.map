{"version":3,"sources":["../../node_modules/gulp-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","common/Beam.js","common/Explosion.js","common/Projectile.js","common/ProjectilePool.js","fake_4b657c97.js","states/boot.js","states/load.js","states/menu.js","states/play.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"main.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * Created by jorge.graca on 10/10/2015.\r\n */\r\n\r\nvar MAX_LENGTH = 850; // pixels\r\nvar TOTAL = 2000; //ms\r\nvar FADE_TIME = 600; //ms\r\nvar BEAM_SPEED_START = 100;\r\nvar FIRE_TIME = 100;//ms\r\n\r\nvar Beam = function(game, myCollisionGroup) {\r\n    Phaser.Sprite.call(this, game, 0, 0, 'beam');\r\n\r\n    this.game.physics.p2.enable(this, true);\r\n    this.body.fixedRotation = true;\r\n    this.myCollisionGroup = myCollisionGroup;\r\n    this.body.setRectangleFromSprite(this);//(this.width, this.height);\r\n    this.body.setCollisionGroup(myCollisionGroup);\r\n\r\n    this.alphaTween = this.game.add.tween(this).to({alpha: 0}, FADE_TIME, null, false, TOTAL - FADE_TIME);\r\n    this.alphaTween.onComplete.add(function(){\r\n        this.kill();\r\n    }, this);\r\n    this.sizeTween = this.game.add.tween(this).to({width: MAX_LENGTH}, TOTAL - FADE_TIME);\r\n    this.glowTween = this.game.add.tween(this.scale).to({y: 2}, 200, null, null, 50, -1, true);\r\n    this.velocityTween = this.game.add.tween(this.body.velocity).to({\r\n        x : 0,// Math.cos(this.rotation) * BEAM_SPEED_END,\r\n        y : 0 //Math.sin(this.rotation) * BEAM_SPEED_END\r\n    }, TOTAL-FIRE_TIME,  null, false, 0);\r\n\r\n    this.anchor.set(0, 0.5);\r\n    this.kill();\r\n\r\n    this.scale.setTo(0, 1);\r\n}\r\n\r\nBeam.prototype = Object.create(Phaser.Sprite.prototype);\r\n\r\nBeam.prototype.update = function() {\r\n   Phaser.Sprite.prototype.update.call(this);\r\n\r\n   this.body.setRectangleFromSprite(this);\r\n   //this.body.setPosition(this.position);\r\n   this.body.reset(this.x, this.y);\r\n   this.body.setCollisionGroup(this.myCollisionGroup);\r\n\r\n   //game.debug.bodyInfo(this, 32, 32);\r\n   //game.debug.body(this);\r\n};\r\n\r\n\r\nBeam.prototype.shoot = function(x,y) {\r\n    // Revive the bullet\r\n    // This makes the bullet \"alive\"\r\n    this.revive();\r\n\r\n    // Bullets should kill themselves when they leave the world.\r\n    // Phaser takes care of this for me by setting this flag\r\n    // but you can do it yourself by killing the bullet if\r\n    // its x,y coordinates are outside of the world.\r\n    //this.checkWorldBounds = true;\r\n    //this.outOfBoundsKill = true;\r\n\r\n    // Set the bullet position to the gun position.\r\n    this.reset(x, y);\r\n    this.alpha = 1;\r\n    this.scale.setTo(0, 1);\r\n\r\n    this.sizeTween.start();\r\n    this.alphaTween.start();\r\n    this.glowTween.start();\r\n    // Aim the gun at the pointer.\r\n    // All this function does is calculate the angle using\r\n    // Math.atan2(yPointer-yGun, xPointer-xGun)\r\n    this.rotation = this.game.physics.arcade.angleToPointer(this);\r\n    this.body.rotation = this.rotation;\r\n\r\n    game.time.events.add(Phaser.Timer.QUARTER, function(){\r\n        this.body.velocity.x = Math.cos(this.rotation) * BEAM_SPEED_START;\r\n        this.body.velocity.y = Math.sin(this.rotation) * BEAM_SPEED_START;\r\n        this.velocityTween.start();\r\n    }, this).autoDestroy = true;\r\n\r\n\r\n};\r\n\r\nBeam.prototype.constructor = Beam;\r\n\r\nmodule.exports = Beam;","/**\r\n * Created by jorge.graca on 10/10/2015.\r\n */\r\n\r\nvar BULLET_SPEED = 500; // pixels/second\r\n\r\nvar Explosion = function(game, x, y) {\r\n    Phaser.Group.call(this, game);\r\n\r\n    this.explosion = this.create(x, y, 'explosion');\r\n    this.explosion.anchor.setTo(0.5, 0.5);\r\n    this.explosion.kill();\r\n\r\n    // Add an animation for the explosion that kills the sprite when the\r\n    // animation is complete\r\n    this.explosionAnim = this.explosion.animations.add('boom', [0, 1, 2, 3], 50, false);\r\n    this.explosionAnim.killOnComplete = true;\r\n}\r\n\r\nExplosion.prototype = Object.create(Phaser.Group.prototype);\r\n\r\n//Explosion.prototype.update = function() {\r\n//    Phaser.Group.prototype.update.call(this);\r\n//};\r\n\r\nExplosion.prototype.boom = function(x,y) {\r\n    this.explosion.x = x;\r\n    this.explosion.y = y;\r\n\r\n    this.explosion.revive();\r\n    // Set rotation of the explosion at random for a little variety\r\n    this.explosion.angle = this.game.rnd.integerInRange(0, 360);\r\n    // Play the animation\r\n    this.explosion.animations.play('boom');\r\n};\r\n\r\nExplosion.prototype.constructor = Explosion;\r\n\r\nmodule.exports = Explosion;","/**\r\n * Created by jorge.graca on 10/10/2015.\r\n */\r\n\r\nvar BULLET_SPEED = 500; // pixels/second\r\n\r\nvar Projectile = function(game, x, y) {\r\n    Phaser.Sprite.call(this, game, x, y, 'BalaPotassio');\r\n\r\n    this.game.physics.p2.enable(this, true);\r\n    this.body.setCircle(this.width/2);\r\n    this.body.fixedRotation = true;\r\n\r\n\r\n    this.anchor.set(0.5, 0.5);\r\n    this.kill();\r\n}\r\n\r\nProjectile.prototype = Object.create(Phaser.Sprite.prototype);\r\n\r\n//Projectile.prototype.update = function() {\r\n//    Phaser.Sprite.prototype.update.call(this);\r\n//};\r\n\r\nProjectile.prototype.shootBullet = function(x,y) {\r\n    // Revive the bullet\r\n    // This makes the bullet \"alive\"\r\n    this.revive();\r\n\r\n    // Bullets should kill themselves when they leave the world.\r\n    // Phaser takes care of this for me by setting this flag\r\n    // but you can do it yourself by killing the bullet if\r\n    // its x,y coordinates are outside of the world.\r\n    this.body.collideWorldBounds = false;//p2\r\n    this.checkWorldBounds = true;//arcade\r\n    this.outOfBoundsKill = true;\r\n\r\n    // Set the bullet position to the gun position.\r\n    this.reset(x, y);\r\n\r\n    // Aim the gun at the pointer.\r\n    // All this function does is calculate the angle using\r\n    // Math.atan2(yPointer-yGun, xPointer-xGun)\r\n    this.rotation = this.game.physics.arcade.angleToPointer(this);\r\n\r\n    // Shoot it\r\n    this.body.velocity.x = Math.cos(this.rotation) * BULLET_SPEED;\r\n    this.body.velocity.y = Math.sin(this.rotation) * BULLET_SPEED;\r\n};\r\n\r\nProjectile.prototype.constructor = Projectile;\r\n\r\nmodule.exports = Projectile;","/**\r\n * Created by jorge.graca on 10/10/2015.\r\n */\r\nvar Projectile = require('..\\\\common\\\\Projectile');\r\n\r\nvar NUMBER_OF_BULLETS = 50;\r\n\r\nvar ProjectilePool = function(game, bulletCollisionGroup, collisionArr){\r\n    this.bulletPool = game.add.group();\r\n    this.iBullet = 0;\r\n\r\n    this.bulletPool.enableBody = true;\r\n    this.bulletPool.physicsBodyType = Phaser.Physics.P2JS;\r\n\r\n    for(var i = 0; i < NUMBER_OF_BULLETS; i++) {\r\n        var tempP = new Projectile(game, 0, 0);\r\n\r\n        tempP.body.setCollisionGroup(bulletCollisionGroup);\r\n        tempP.body.collides(collisionArr);\r\n        this.bulletPool.add(tempP);\r\n    }\r\n};\r\n\r\nProjectilePool.prototype.shoot = function(x,y) {\r\n    this.bulletPool.children[this.iBullet++%NUMBER_OF_BULLETS].shootBullet(x,y);\r\n};\r\n\r\nmodule.exports = ProjectilePool;","\"use strict\";\r\n\r\nwindow.game = new Phaser.Game(1200, 600, Phaser.AUTO);\r\n\r\ngame.globals = {\r\n    //Add variables here that you want to access globally\r\n    //score: 0 could be accessed as game.globals.score for example\r\n};\r\n\r\ngame.state.add('play', require('./states/play.js'));\r\ngame.state.add('load', require('./states/load.js'));\r\ngame.state.add('menu', require('./states/menu.js'));\r\ngame.state.add('boot', require('./states/boot.js'));\r\n\r\ngame.state.start('boot');","module.exports = {\r\n    init: function () {\r\n        //Add here your scaling options\r\n    },\r\n\r\n    preload: function () {\r\n        //Load just the essential files for the loading screen,\r\n        //they will be used in the Load State\r\n        game.load.image('loading', 'assets/loading.png');\r\n        game.load.image('load_progress_bar', 'assets/progress_bar_bg.png');\r\n        game.load.image('load_progress_bar_dark', 'assets/progress_bar_fg.png');\r\n    },\r\n\r\n    create: function () {\r\n        //game.plugins.add(Phaser.Plugin.Inspector);\r\n\r\n        game.state.start('load');\r\n    }\r\n};","module.exports = {\r\n    loadingLabel: function () {\r\n        //Here we add a label to let the user know we are loading everything\r\n        //This is the \"Loading\" phrase in pixel art\r\n        //You can just as easily change it for your own art :)\r\n        this.loading = game.add.sprite(game.world.centerX, game.world.centerY - 20, 'loading');\r\n        this.loading.anchor.setTo(0.5, 0.5);\r\n        //This is the bright blue bar that is hidden by the dark bar\r\n        this.barBg = game.add.sprite(game.world.centerX, game.world.centerY + 40, 'load_progress_bar');\r\n        this.barBg.anchor.setTo(0.5, 0.5);\r\n        //This bar will get cropped by the setPreloadSprite function as the game loads!\r\n        this.bar = game.add.sprite(game.world.centerX - 192, game.world.centerY + 40, 'load_progress_bar_dark');\r\n        this.bar.anchor.setTo(0, 0.5);\r\n        game.load.setPreloadSprite(this.bar);\r\n    },\r\n\r\n    preload: function () {\r\n        this.loadingLabel();\r\n        //Add here all the assets that you need to game.load\r\n\r\n\r\n        this.load.image('BalaPotassio', 'assets/bullet.png');//asynchronous\r\n        game.load.spritesheet('explosion', 'assets/explosion.png', 128, 128);//asynchronous\r\n        this.load.spritesheet('barbarian', 'assets/barbarian.png', 144, 144);//asynchronous\r\n        this.load.image('beam', 'assets/beam.png');//asynchronous\r\n    },\r\n\r\n    create: function () {\r\n        game.state.start('play'); //TODO: do the menu\r\n    }\r\n};","module.exports = {\r\n    create: function(){\r\n        //This is just like any other Phaser create function\r\n    },\r\n    update: function(){\r\n        //Game logic goes here\r\n    },\r\n};","var ProjectilePool = require('../common/ProjectilePool');\r\nvar Explosion = require('../common/Explosion');\r\nvar Beam = require('../common/Beam');\r\n\r\n// Define constants\r\nvar LAZER_DELAY = 2500; //ms (0.5/sec)\r\n\r\nmodule.exports = {\r\n    create: function(){\r\n        this.lastLazerShotAt = 0;\r\n\r\n        this.explosion = new Explosion(this.game, 0, 0);\r\n\r\n        this.game.physics.startSystem(Phaser.Physics.P2JS);\r\n        this.game.physics.p2.setImpactEvents(true);\r\n        this.bulletCollisionGroup = game.physics.p2.createCollisionGroup();\r\n        this.beamCollisionGroup = game.physics.p2.createCollisionGroup();\r\n        this.game.physics.p2.updateBoundsCollisionGroup();\r\n        this.bulletPool = new ProjectilePool(this.game, this.bulletCollisionGroup, [this.bulletCollisionGroup, this.beamCollisionGroup]);\r\n        this.bulletPool2 = new ProjectilePool(this.game, this.bulletCollisionGroup, [this.bulletCollisionGroup, this.beamCollisionGroup]);\r\n\r\n        this.beam = this.add.existing(new Beam(this.game, this.beamCollisionGroup));\r\n        this.beam.body.collides(this.bulletCollisionGroup, function(obj1, obj2){\r\n            // Create an explosion\r\n            this.explosion.boom(obj2.x, obj2.y);\r\n\r\n            // Kill the bullet\r\n            //obj2.kill();\r\n        }, this);\r\n\r\n\r\n\r\n\r\n\r\n        this._barbarian = this.add.sprite(300, 300, 'barbarian');\r\n        this._barbarian.anchor.set(0.5, 0.5);\r\n\r\n        this._barbarian.animations.add('walk', [0, 1, 2, 3, 4, 5, 6, 7, 8]);\r\n        this._barbarian.animations.add('run', [11, 12, 13, 14, 15, 16, 17, 18]);\r\n        this._barbarian.animations.add('attack', [19, 20, 21]);\r\n\r\n        this.game.physics.arcade.enable(this._barbarian);\r\n\r\n        this._cursors = this.game.input.keyboard.createCursorKeys();\r\n        this._shift = this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT);\r\n\r\n        this._isAttacking = 0;\r\n    },\r\n    update: function(){\r\n\r\n        // Shoot a bullet\r\n        if (this.game.input.activePointer.isDown) {\r\n            if (!this._isAttacking) {\r\n                //others have magic mike\r\n                //we have magic numbers\r\n                this._isAttacking = 15;\r\n            }\r\n        }\r\n        // Check if bullets have collided\r\n /*       this.game.physics.arcade.collide(this.bulletPool.bulletPool, this.bulletPool2.bulletPool, function(bullet, bullet2) {\r\n            // Create an explosion\r\n            this.explosion.boom(bullet.x, bullet.y);\r\n\r\n            // Kill the bullet\r\n            bullet.kill();\r\n            bullet2.kill();\r\n        }, null, this);\r\n\r\n\r\n        // Check if bullets have collided with beams\r\n        this.game.physics.arcade.collide(this.bulletPool2.bulletPool, this.beam, function(beam, bullet) {\r\n            // Create an explosion\r\n            this.explosion.boom(bullet.x, bullet.y);\r\n\r\n            // Kill the bullet\r\n            bullet.kill();\r\n        }, null, this);\r\n*/\r\n\r\n\r\n        this._barbarian.body.velocity.x = 0;\r\n        this._barbarian.body.velocity.y = 0;\r\n\r\n        if (this._isAttacking) {\r\n            //others have magic mike\r\n            //we have magic numbers\r\n            this._barbarian.animations.play('attack', 10);\r\n        } else if (this._cursors.left.isDown || this._cursors.right.isDown || this._cursors.up.isDown || this._cursors.down.isDown) {\r\n            this._barbarian.animations.play(this._shift.isDown ? 'run' : 'walk', 30, true);\r\n        } else {\r\n            this._barbarian.animations.stop('walk');\r\n            this._barbarian.animations.stop('run');\r\n            this._barbarian.frame = 0;\r\n        }\r\n\r\n        if (this._isAttacking && this._isAttacking--) {\r\n            //others have magic mike\r\n            //we have magic numbers\r\n            if (this._isAttacking === 8) {\r\n                //this.bulletPool.shoot(this._barbarian.x + 60, this._barbarian.y - 15);\r\n                this.bulletPool2.shoot(600, 600);\r\n            }\r\n\r\n            if (this.game.time.now - this.lastLazerShotAt > LAZER_DELAY) {\r\n                this.lastLazerShotAt = this.game.time.now;\r\n                this.beam.shoot(this._barbarian.x, this._barbarian.y);\r\n            }\r\n        }\r\n\r\n        var speedModifier = this._shift.isDown ? 2 : 1;\r\n\r\n        if (this._cursors.left.isDown) {\r\n            this._barbarian.body.velocity.x = speedModifier * -200;\r\n        } else if (this._cursors.right.isDown) {\r\n            this._barbarian.body.velocity.x = speedModifier * 200;\r\n        }\r\n\r\n        if (this._cursors.up.isDown) {\r\n            this._barbarian.body.velocity.y = speedModifier * -200;\r\n        } else if (this._cursors.down.isDown) {\r\n            this._barbarian.body.velocity.y = speedModifier * 200;\r\n        }\r\n    }\r\n};"]}